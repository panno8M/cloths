nimTitle	sdk	cloths/sdk.html	module cloths/sdk		0
nim	Style	cloths/sdk.html#Style	type Style		14
nim	Data	cloths/sdk.html#Data	object Data		15
nim	Cloth	cloths/sdk.html#Cloth	type Cloth		21
nim	data	cloths/sdk.html#data,string	proc data(str: string): Data		26
nim	data	cloths/sdk.html#data,varargs[Cloth]	proc data(subitems: varargs[Cloth]): Data		27
nim	cloth_lowlevel	cloths/sdk.html#cloth_lowlevel,Style,Data	proc cloth_lowlevel(style: Style; data: Data): Cloth		29
nim	cloth_lowlevel	cloths/sdk.html#cloth_lowlevel,Style,string	proc cloth_lowlevel(style: Style; str: string): Cloth		30
nim	rendered_cloth	cloths/sdk.html#rendered_cloth,Data	proc rendered_cloth(data: Data): Cloth		32
nim	rendered_cloth	cloths/sdk.html#rendered_cloth,string	proc rendered_cloth(str: string): Cloth		33
nim	len	cloths/sdk.html#len,Data	proc len(data: Data): int		36
nim	copy	cloths/sdk.html#copy,Cloth	proc copy(cloth: Cloth): Cloth		41
nim	copy	cloths/sdk.html#copy,Data	proc copy(data: Data): Data		42
nim	apply	cloths/sdk.html#apply.e,Style,Data	method apply(style: Style; data: Data): Data		49
nim	apply	cloths/sdk.html#apply,Cloth	proc apply(cloth: Cloth): Data		51
nim	eachline	cloths/sdk.html#eachline.i,Data	iterator eachline(data: Data): string		55
nim	eachline	cloths/sdk.html#eachline.i,Data_2	iterator eachline(data: var Data): var string		65
nim	eachpair	cloths/sdk.html#eachpair.i,Data	iterator eachpair(data: var Data): tuple[i_line: int, line: var string]		75
nim	eachAppliedData	cloths/sdk.html#eachAppliedData.t,Data,,,	template eachAppliedData(data: Data; metatoken, datatoken, body): untyped		85
nim	whitespace	cloths/sdk.html#whitespace,Natural	proc whitespace(length: Natural): string		108
nim	Constant	cloths/sdk.html#Constant	type Constant		115
nim	constant	cloths/sdk.html#constant_2	let constant		117
nim	Plain	cloths/sdk.html#Plain	type Plain		122
nim	plain	cloths/sdk.html#plain_2	let plain		123
nim	MultiLine	cloths/sdk.html#MultiLine	type MultiLine		124
nim	multiline	cloths/sdk.html#multiline_2	let multiline		125
nim	Empty	cloths/sdk.html#Empty	type Empty		136
nim	empty	cloths/sdk.html#empty_2	let empty		137
nim	Ignore	cloths/sdk.html#Ignore	type Ignore		138
nim	ignore	cloths/sdk.html#ignore_2	let ignore		139
nim	cloth	cloths/sdk.html#cloth,Style,varargs[Cloth]	proc cloth(style: Style; subitems: varargs[Cloth]): Cloth		146
nim	`$`	cloths/sdk.html#$,Cloth	proc `$`(cloth: Cloth): string		149
nim	add	cloths/sdk.html#add,Cloth,varargs[Cloth]	proc add(cloth: Cloth; subitems: varargs[Cloth])		152
nim	weave	cloths/sdk.html#weave.m,Style,	macro weave(style: Style; body): untyped		184
nim	weave	cloths/sdk.html#weave.m,Cloth,	macro weave(cloth: Cloth; body): untyped		187
nim	clothfy	cloths/sdk.html#clothfy.c,string	converter clothfy(text: string): Cloth		190
nim	styletest	cloths/sdk.html#styletest.t	template styletest(body)		205
nimgrp	clothlowlevel	cloths/sdk.html#cloth_lowlevel-procs-all	proc		29
nimgrp	renderedcloth	cloths/sdk.html#rendered_cloth-procs-all	proc		32
nimgrp	data	cloths/sdk.html#data-procs-all	proc		26
nimgrp	copy	cloths/sdk.html#copy-procs-all	proc		41
nimgrp	eachline	cloths/sdk.html#eachline-iterators-all	iterator		55
nimgrp	weave	cloths/sdk.html#weave-macros-all	macro		184
